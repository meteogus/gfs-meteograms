name: Run and Upload Meteograms via SFTP

on:
schedule:
  - cron: "0 0,6,12,18 * * *"  # Runs at 00, 06, 12, 18 UTC daily
workflow_dispatch:       # Allow manual trigger in GitHub

jobs:
  build-and-upload:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install paramiko

      - name: Run meteogram scripts
        run: |
          python athens.py
          python kiato.py
          python lamia.py
          python london.py

      - name: Upload images via SFTP with paramiko
        env:
          SFTP_HOST: ${{ secrets.SFTP_HOST }}
          SFTP_PORT: ${{ secrets.SFTP_PORT }}
          SFTP_USER: ${{ secrets.SFTP_USER }}
          SFTP_PASS: ${{ secrets.SFTP_PASS }}
          SFTP_FOLDER: ${{ secrets.SFTP_FOLDER }}
        run: |
          python - <<EOF
          import paramiko
          import os
          import sys

          host = os.getenv('SFTP_HOST')
          port = int(os.getenv('SFTP_PORT', '22'))
          user = os.getenv('SFTP_USER')
          password = os.getenv('SFTP_PASS')
          folder = os.getenv('SFTP_FOLDER', '/').rstrip('/')

          files = [
              'athens_meteogram.png',
              'kiato_meteogram.png',
              'lamia_meteogram.png',
              'london_meteogram.png'
          ]

          if not all([host, user, password]):
              print("Missing SFTP credentials")
              sys.exit(1)

          print(f"Connecting to {host}:{port} as {user}")
          try:
              transport = paramiko.Transport((host, port))
              transport.connect(username=user, password=password)
              sftp = paramiko.SFTPClient.from_transport(transport)
          except Exception as e:
              print(f"Failed to connect or authenticate: {e}")
              sys.exit(1)

          for f in files:
              try:
                  local_path = f
                  remote_path = folder + '/' + f
                  print(f"Uploading {local_path} to {remote_path} ...")
                  sftp.put(local_path, remote_path)
              except Exception as e:
                  print(f"Failed to upload {f}: {e}")

          sftp.close()
          transport.close()
          print("âœ… All files uploaded successfully.")
          EOF
